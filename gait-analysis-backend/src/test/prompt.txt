Do you remember these methods that we implemented

@Override
    public ClinicInfoResponse getMyClinicProfile() {
        Long userId = authUtil.loggedInUserId();

        Clinic clinic = clinicRepository.findByUser_UserId(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Clinic", "userId", userId));

        return clinicMapper.toClinicInfoResponse(clinic);
    }


    @Override
    public List<ClinicInfoResponse> getAllClinics() {
        return clinicRepository.findAll().stream()
                .map(clinicMapper::toClinicInfoResponse)
                .toList();
    }


@GetMapping("/clinics/me")
    @PreAuthorize("hasRole('CLINIC')")
    @Operation(
            summary = "Get the logged-in clinic's own profile",
            description = "Returns the profile details of the currently authenticated clinic.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Clinic profile retrieved successfully"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "403", description = "Forbidden")
            }
    )
    public ResponseEntity<ClinicInfoResponse> getMyClinicProfile() {
        ClinicInfoResponse response = clinicService.getMyClinicProfile();
        return ResponseEntity.ok(response);
    }


    @GetMapping("/clinics")
    @Operation(
            summary = "Get all clinics",
            description = "Returns a list of all registered clinics. Accessible to any authenticated user.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "List of clinics returned"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized")
            }
    )
    public ResponseEntity<List<ClinicInfoResponse>> getAllClinics() {
        List<ClinicInfoResponse> clinics = clinicService.getAllClinics();
        return ResponseEntity.ok(clinics);
    }


I want to write tests for them. Write complete tests that cover all the possible ways.
I have already