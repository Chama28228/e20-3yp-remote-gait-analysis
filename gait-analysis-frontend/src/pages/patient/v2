import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  LinearProgress,
  Stepper,
  Step,
  StepLabel,
  Grid,
  Paper,
  Container,
  Alert,
  Divider,
  CircularProgress
} from '@mui/material';
import {
  Replay,
  PlayArrow,
  Stop,
  Videocam,
  ArrowBack,
  ArrowForward,
  SignalCellularAlt,
  FiberManualRecord,
 
} from '@mui/icons-material';
import DeviceStatusCard from './DeviceStatusCard';
import VideoCard from './VideoCard';

const GaitAnalysisTest = () => {
  const [activeStep, setActiveStep] = useState(0);
  const [deviceStatus, setDeviceStatus] = useState({
    deviceAlive: true,
    deviceCalibrated: false,
    atlas: true
  });
  const [orientationCaptured, setOrientationCaptured] = useState(false);
  const [isCalibrating, setIsCalibrating] = useState(false);
  const [calibrationProgress, setCalibrationProgress] = useState(0);
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);

  const steps = ['Calibrate Device', 'Wear Device', 'Start Test'];

  // Simulate calibration process
  const startCalibration = () => {
    setIsCalibrating(true);
    setCalibrationProgress(0);
    
    const interval = setInterval(() => {
      setCalibrationProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsCalibrating(false);
          setDeviceStatus(prev => ({
            ...prev,
            deviceCalibrated: true
          }));
          return 100;
        }
        return prev + 10;
      });
    }, 300);
  };

  // Capture initial orientation
  const captureOrientation = () => {
    setOrientationCaptured(true);
    setTimeout(() => {
      setActiveStep(2);
    }, 1500);
  };

  // Recording timer
  useEffect(() => {
    let interval;
    if (isRecording) {
      interval = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isRecording]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <Box sx={{ 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      py: 4
    }}>
      <Container maxWidth="xl">
        {/* Header */}
        <Card 
          elevation={0}
          sx={{ 
            mb: 4, 
            borderRadius: 4,
            background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.9) 100%)',
            backdropFilter: 'blur(20px)',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}
        >
          <CardContent sx={{ p: 4 }}>
            <Box textAlign="center" mb={4}>
              <Typography variant="h3" fontWeight="700" sx={{ 
                mb: 2,
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                backgroundClip: 'text',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent'
              }}>
                Gait Analysis Test Session
              </Typography>
              <Typography variant="h6" color="text.secondary" fontWeight="400">
                Follow the steps below to conduct your gait analysis test
              </Typography>
            </Box>
            
            {/* Progress Stepper */}
            <Stepper 
              activeStep={activeStep} 
              alternativeLabel
              sx={{
                '& .MuiStepLabel-label': {
                  fontSize: '1.1rem',
                  fontWeight: 600
                },
                '& .MuiStepIcon-root': {
                  fontSize: '2rem'
                }
              }}
            >
              {steps.map((label) => (
                <Step key={label}>
                  <StepLabel>{label}</StepLabel>
                </Step>
              ))}
            </Stepper>
          </CardContent>
        </Card>

        {/* Step 1: Calibration */}
        {activeStep === 0 && (
          <Card 
            elevation={0}
            sx={{ 
              borderRadius: 4,
              background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.9) 100%)',
              backdropFilter: 'blur(20px)',
              border: '1px solid rgba(255, 255, 255, 0.2)'
            }}
          >
            <CardContent sx={{ p: 4 }}>
              <Box display="flex" alignItems="center" gap={3} mb={4}>
                <Box
                  sx={{
                    width: 64,
                    height: 64,
                    background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                    borderRadius: 3,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: '0 8px 30px rgba(59, 130, 246, 0.3)'
                  }}
                >
                  <Replay sx={{ color: 'white', fontSize: 32 }} />
                </Box>
                <Box>
                  <Typography variant="h4" fontWeight="700" sx={{ mb: 1 }}>
                    Step 1: Calibrate Your Device
                  </Typography>
                  <Typography variant="h6" color="text.secondary" fontWeight="400">
                    Ensure your device is properly calibrated before starting the test
                  </Typography>
                </Box>
              </Box>

              <Grid container spacing={4}>
                {/* Device Status */}
                <Grid item xs={12}>
                  <Typography variant="h5" fontWeight="600" sx={{ mb: 3 }}>
                    Device Status
                  </Typography>
                  <Grid container spacing={3}>
                    <Grid item xs={12} sm={4}>
                      <DeviceStatusCard 
                        status={deviceStatus.deviceAlive} 
                        label="Device Alive" 
                        icon="Wifi"
                      />
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <DeviceStatusCard 
                        status={deviceStatus.deviceCalibrated} 
                        label="Device Calibrated" 
                        icon="CheckCircle"
                      />
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <DeviceStatusCard 
                        status={deviceStatus.atlas} 
                        label="Atlas Connection" 
                        icon="SignalCellularAlt"
                      />
                    </Grid>
                  </Grid>
                </Grid>

                {/* Instructions and Video */}
                <Grid item xs={12} lg={8}>
                  <Paper 
                    elevation={0}
                    sx={{ 
                      p: 4, 
                      borderRadius: 4,
                      background: 'linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%)',
                      border: '1px solid #bae6fd'
                    }}
                  >
                    <Typography variant="h5" fontWeight="600" color="primary" sx={{ mb: 3 }}>
                      Calibration Instructions
                    </Typography>
                    <Box sx={{ mb: 3 }}>
                      <Typography variant="body1" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                        <Box component="span" sx={{ 
                          width: 8, 
                          height: 8, 
                          borderRadius: '50%', 
                          bgcolor: 'primary.main', 
                          mr: 2 
                        }} />
                        Position your device firmly for few seconds
                      </Typography>
                      <Typography variant="body1" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                        <Box component="span" sx={{ 
                          width: 8, 
                          height: 8, 
                          borderRadius: '50%', 
                          bgcolor: 'primary.main', 
                          mr: 2 
                        }} />
                        Tilt your device 45° and keep hold for few seconds, repeat for 90°
                      </Typography>
                      <Typography variant="body1" sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box component="span" sx={{ 
                          width: 8, 
                          height: 8, 
                          borderRadius: '50%', 
                          bgcolor: 'primary.main', 
                          mr: 2 
                        }} />
                        Follow the video instructions for proper calibration
                      </Typography>
                    </Box>
                  </Paper>
                </Grid>

                <Grid item xs={12} lg={4}>
                  <VideoCard 
                    title="Calibration Tutorial"
                    subtitle="Watch the step-by-step guide"
                    aspectRatio="4/5"
                  />
                </Grid>

                {/* Calibration Progress */}
                {isCalibrating && (
                  <Grid item xs={12}>
                    <Paper 
                      elevation={0}
                      sx={{ 
                        p: 3, 
                        borderRadius: 3,
                        background: 'linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%)',
                        border: '1px solid #bbf7d0'
                      }}
                    >
                      <Box display="flex" justifyContent="space-between" mb={2}>
                        <Typography variant="h6" fontWeight="600">
                          Calibration Progress
                        </Typography>
                        <Typography variant="h6" fontWeight="600" color="success.main">
                          {calibrationProgress}%
                        </Typography>
                      </Box>
                      <LinearProgress 
                        variant="determinate" 
                        value={calibrationProgress} 
                        sx={{ 
                          height: 12, 
                          borderRadius: 6,
                          bgcolor: 'rgba(34, 197, 94, 0.1)',
                          '& .MuiLinearProgress-bar': {
                            background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
                            borderRadius: 6
                          }
                        }}
                      />
                    </Paper>
                  </Grid>
                )}

                {/* Action Buttons */}
                <Grid item xs={12}>
                  <Box display="flex" gap={3} flexWrap="wrap">
                    <Button
                      variant="contained"
                      size="large"
                      onClick={startCalibration}
                      disabled={isCalibrating}
                      startIcon={isCalibrating ? <CircularProgress size={20} color="inherit" /> : <Replay />}
                      sx={{ 
                        minWidth: 220,
                        py: 2,
                        px: 4,
                        borderRadius: 3,
                        background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                        boxShadow: '0 8px 30px rgba(59, 130, 246, 0.3)',
                        fontSize: '1.1rem',
                        fontWeight: 600,
                        '&:hover': {
                          background: 'linear-gradient(135deg, #2563eb 0%, #1e40af 100%)',
                          transform: 'translateY(-2px)',
                          boxShadow: '0 12px 40px rgba(59, 130, 246, 0.4)'
                        }
                      }}
                    >
                      {isCalibrating ? 'Calibrating...' : 'Start Calibration'}
                    </Button>
                    
                    {deviceStatus.deviceCalibrated && (
                      <Button
                        variant="contained"
                        color="success"
                        size="large"
                        onClick={() => setActiveStep(1)}
                        endIcon={<ArrowForward />}
                        sx={{ 
                          minWidth: 180,
                          py: 2,
                          px: 4,
                          borderRadius: 3,
                          background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
                          boxShadow: '0 8px 30px rgba(34, 197, 94, 0.3)',
                          fontSize: '1.1rem',
                          fontWeight: 600,
                          '&:hover': {
                            background: 'linear-gradient(135deg, #16a34a 0%, #15803d 100%)',
                            transform: 'translateY(-2px)',
                            boxShadow: '0 12px 40px rgba(34, 197, 94, 0.4)'
                          }
                        }}
                      >
                        Next Step
                      </Button>
                    )}
                  </Box>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        )}

        {/* Step 2: Wear Device */}
        {activeStep === 1 && (
          <Card 
            elevation={0}
            sx={{ 
              borderRadius: 4,
              background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.9) 100%)',
              backdropFilter: 'blur(20px)',
              border: '1px solid rgba(255, 255, 255, 0.2)'
            }}
          >
            <CardContent sx={{ p: 4 }}>
              <Box display="flex" alignItems="center" gap={3} mb={4}>
                <Box
                  sx={{
                    width: 64,
                    height: 64,
                    background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
                    borderRadius: 3,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: '0 8px 30px rgba(34, 197, 94, 0.3)'
                  }}
                >
                  <Videocam sx={{ color: 'white', fontSize: 32 }} />
                </Box>
                <Box>
                  <Typography variant="h4" fontWeight="700" sx={{ mb: 1 }}>
                    Step 2: Wear Your Device
                  </Typography>
                  <Typography variant="h6" color="text.secondary" fontWeight="400">
                    Position the device correctly and get ready for the test
                  </Typography>
                </Box>
              </Box>

              <Grid container spacing={4}>
                <Grid item xs={12} lg={8}>
                  <Alert 
                    severity="info" 
                    sx={{ 
                      mb: 4,
                      borderRadius: 3,
                      border: '1px solid #bae6fd',
                      background: 'linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%)',
                      '& .MuiAlert-icon': { fontSize: '2rem' }
                    }}
                  >
                    <Typography variant="h6" fontWeight="600" sx={{ mb: 2 }}>
                      Setup Instructions
                    </Typography>
                    <Typography variant="body1" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ 
                        width: 8, 
                        height: 8, 
                        borderRadius: '50%', 
                        bgcolor: 'info.main', 
                        mr: 2 
                      }} />
                      Wear your device and get comfortable
                    </Typography>
                    <Typography variant="body1" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ 
                        width: 8, 
                        height: 8, 
                        borderRadius: '50%', 
                        bgcolor: 'info.main', 
                        mr: 2 
                      }} />
                      When you are relaxed and ready click "I'm Ready"
                    </Typography>
                    <Typography variant="body1" sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ 
                        width: 8, 
                        height: 8, 
                        borderRadius: '50%', 
                        bgcolor: 'info.main', 
                        mr: 2 
                      }} />
                      We will prepare your session for the gait analysis
                    </Typography>
                  </Alert>

                  <Box display="flex" gap={3} flexWrap="wrap">
                    <Button
                      variant="outlined"
                      size="large"
                      onClick={() => setActiveStep(0)}
                      startIcon={<ArrowBack />}
                      sx={{ 
                        minWidth: 150,
                        py: 2,
                        px: 4,
                        borderRadius: 3,
                        borderWidth: 2,
                        fontSize: '1.1rem',
                        fontWeight: 600,
                        '&:hover': {
                          borderWidth: 2,
                          transform: 'translateY(-2px)'
                        }
                      }}
                    >
                      Back
                    </Button>
                    <Button
                      variant="contained"
                      size="large"
                      onClick={captureOrientation}
                      disabled={orientationCaptured}
                      sx={{ 
                        minWidth: 200,
                        py: 2,
                        px: 4,
                        borderRadius: 3,
                        background: orientationCaptured 
                          ? 'linear-gradient(135deg, #94a3b8 0%, #64748b 100%)'
                          : 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
                        boxShadow: orientationCaptured 
                          ? '0 8px 30px rgba(148, 163, 184, 0.3)'
                          : '0 8px 30px rgba(34, 197, 94, 0.3)',
                        fontSize: '1.1rem',
                        fontWeight: 600,
                        '&:hover': {
                          background: orientationCaptured 
                            ? 'linear-gradient(135deg, #94a3b8 0%, #64748b 100%)'
                            : 'linear-gradient(135deg, #16a34a 0%, #15803d 100%)',
                          transform: orientationCaptured ? 'none' : 'translateY(-2px)'
                        }
                      }}
                    >
                      {orientationCaptured ? (
                        <>
                          <CircularProgress size={20} sx={{ mr: 1 }} color="inherit" />
                          Processing...
                        </>
                      ) : (
                        "I'm Ready"
                      )}
                    </Button>
                  </Box>
                </Grid>

                <Grid item xs={12} lg={4}>
                  <VideoCard 
                    title="Device Placement Guide"
                    subtitle="Learn proper positioning"
                    aspectRatio="9/16"
                  />
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        )}

        {/* Step 3: Start Test */}
        {activeStep === 2 && (
          <Card 
            elevation={0}
            sx={{ 
              borderRadius: 4,
              background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.9) 100%)',
              backdropFilter: 'blur(20px)',
              border: '1px solid rgba(255, 255, 255, 0.2)'
            }}
          >
            <CardContent sx={{ p: 4 }}>
              <Box display="flex" alignItems="center" gap={3} mb={4}>
                <Box
                  sx={{
                    width: 64,
                    height: 64,
                    background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
                    borderRadius: 3,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: '0 8px 30px rgba(139, 92, 246, 0.3)'
                  }}
                >
                  <PlayArrow sx={{ color: 'white', fontSize: 32 }} />
                </Box>
                <Box>
                  <Typography variant="h4" fontWeight="700" sx={{ mb: 1 }}>
                    Step 3: Let's Start Walking
                  </Typography>
                  <Typography variant="h6" color="text.secondary" fontWeight="400">
                    Begin your gait analysis test
                  </Typography>
                </Box>
              </Box>

              <Grid container spacing={4}>
                {/* Real Time View */}
                <Grid item xs={12} lg={8}>
                  <Paper 
                    elevation={0}
                    sx={{ 
                      aspectRatio: '16/9',
                      background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      borderRadius: 4,
                      mb: 3,
                      border: '1px solid rgba(255, 255, 255, 0.1)',
                      boxShadow: '0 20px 40px rgba(0, 0, 0, 0.3)'
                    }}
                  >
                    <Box textAlign="center" color="white" p={4}>
                      <Box
                        sx={{
                          width: 100,
                          height: 100,
                          borderRadius: '50%',
                          background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          mx: 'auto',
                          mb: 3,
                          boxShadow: '0 8px 30px rgba(59, 130, 246, 0.5)'
                        }}
                      >
                        <SignalCellularAlt sx={{ fontSize: 48 }} />
                      </Box>
                      <Typography variant="h4" fontWeight="700" gutterBottom>
                        Real Time Gait Analysis
                      </Typography>
                      {isRecording ? (
                        <Box display="flex" alignItems="center" justifyContent="center" gap={2}>
                          <FiberManualRecord 
                            sx={{ 
                              color: '#ef4444', 
                              fontSize: 16,
                              animation: 'pulse 1s infinite'
                            }} 
                          />
                          <Typography variant="h5" fontWeight="600">
                            Recording: {formatTime(recordingTime)}
                          </Typography>
                        </Box>
                      ) : (
                        <Typography variant="h6" color="grey.400">
                          Press start to begin recording
                        </Typography>
                      )}
                    </Box>
                  </Paper>

                  <Alert 
                    severity="warning" 
                    sx={{ 
                      borderRadius: 3,
                      border: '1px solid #fbbf24',
                      background: 'linear-gradient(135deg, #fefce8 0%, #fef3c7 100%)',
                      '& .MuiAlert-icon': { fontSize: '2rem' }
                    }}
                  >
                    <Typography variant="h6" fontWeight="600" sx={{ mb: 2 }}>
                      Test Instructions
                    </Typography>
                    <Typography variant="body1" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ 
                        width: 8, 
                        height: 8, 
                        borderRadius: '50%', 
                        bgcolor: 'warning.main', 
                        mr: 2 
                      }} />
                      When you start walking press "Let's Go" Button
                    </Typography>
                    <Typography variant="body1" sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ 
                        width: 8, 
                        height: 8, 
                        borderRadius: '50%', 
                        bgcolor: 'warning.main', 
                        mr: 2 
                      }} />
                      To finish the Session press "Stop Recording"
                    </Typography>
                  </Alert>
                </Grid>

                {/* Control Panel */}
                <Grid item xs={12} lg={4}>
                  {/* Device Status Mini */}
                  <Paper 
                    elevation={0}
                    sx={{ 
                      p: 3, 
                      mb: 3, 
                      borderRadius: 3,
                      background: 'linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%)',
                      border: '1px solid #bae6fd'
                    }}
                  >
                    <Typography variant="h6" fontWeight="600" sx={{ mb: 3 }}>
                      Device Status
                    </Typography>
                    <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                      <Typography variant="body1" fontWeight="500">Connection</Typography>
                      <Chip 
                        icon={<Wifi />} 
                        label="Connected" 
                        color="success" 
                        size="small"
                        sx={{ borderRadius: 2, fontWeight: 600 }}
                      />
                    </Box>
                    <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                      <Typography variant="body1" fontWeight="500">Battery</Typography>
                      <Chip 
                        icon={<Battery90 />} 
                        label="90%" 
                        color="success" 
                        size="small"
                        sx={{ borderRadius: 2, fontWeight: 600 }}
                      />
                    </Box>
                    <Box display="flex" justifyContent="space-between" alignItems="center">
                      <Typography variant="body1" fontWeight="500">Signal</Typography>
                      <Chip 
                        icon={<SignalCellularAlt />} 
                        label="Strong" 
                        color="success" 
                        size="small"
                        sx={{ borderRadius: 2, fontWeight: 600 }}
                      />
                    </Box>
                  </Paper>

                  {/* Recording Controls */}
                  <Box display="flex" flexDirection="column" gap={3}>
                    {!isRecording ? (
                      <Button
                        variant="contained"
                        color="success"
                        size="large"
                        fullWidth
                        onClick={() => {
                          setIsRecording(true);
                          setRecordingTime(0);
                        }}
                        startIcon={<PlayArrow />}
                        sx={{ 
                          py: 3,
                          borderRadius: 3,
                          background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
                          boxShadow: '0 8px 30px rgba(34, 197, 94, 0.3)',
                          fontSize: '1.2rem',
                          fontWeight: 700,
                          '&:hover': {
                            background: 'linear-gradient(135deg, #16a34a 0%, #15803d 100%)',
                            transform: 'translateY(-2px)',
                            boxShadow: '0 12px 40px rgba(34, 197, 94, 0.4)'
                          }
                        }}
                      >
                        Let's Go
                      </Button>
                    ) : (
                      <Button
                        variant="contained"
                        color="error"
                        size="large"
                        fullWidth
                        onClick={() => setIsRecording(false)}
                        startIcon={<Stop />}
                        sx={{ 
                          py: 3,
                          borderRadius: 3,
                          background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                          boxShadow: '0 8px 30px rgba(239, 68, 68, 0.3)',
                          fontSize: '1.2rem',
                          fontWeight: 700,
                          '&:hover': {
                            background: 'linear-gradient(135deg, #dc2626 0%, #b91c1c 100%)',
                            transform: 'translateY(-2px)',
                            boxShadow: '0 12px 40px rgba(239, 68, 68, 0.4)'
                          }
                        }}
                      >
                        Stop Recording
                      </Button>
                    )}

                    <Button
                      variant="outlined"
                      size="large"
                      fullWidth
                      onClick={() => setActiveStep(1)}
                      startIcon={<ArrowBack />}
                      sx={{ 
                        py: 2,
                        borderRadius: 3,
                        borderWidth: 2,
                        fontSize: '1.1rem',
                        fontWeight: 600,
                        '&:hover': {
                          borderWidth: 2,
                          transform: 'translateY(-2px)'
                        }
                      }}
                    >
                      Back to Setup
                    </Button>
                  </Box>

                  {/* Session Info */}
                  {isRecording && (
                    <Paper 
                      elevation={0}
                      sx={{ 
                        p: 3, 
                        mt: 3,
                        borderRadius: 3,
                        background: 'linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%)',
                        border: '1px solid #fca5a5'
                      }}
                    >
                      <Box display="flex" alignItems="center" gap={2} mb={2}>
                        <FiberManualRecord 
                          sx={{ 
                            color: '#ef4444', 
                            fontSize: 16,
                            animation: 'pulse 1s infinite'
                          }} 
                        />
                        <Typography variant="h6" fontWeight="600" color="error.dark">
                          Recording Active
                        </Typography>
                      </Box>
                      <Typography variant="h3" fontWeight="700" color="error.dark" sx={{ mb: 1 }}>
                        {formatTime(recordingTime)}
                      </Typography>
                      <Typography variant="body2" color="error.dark" fontWeight="500">
                        Session Duration
                      </Typography>
                    </Paper>
                  )}
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        )}
      </Container>

      {/* Add pulse animation keyframes */}
      <style jsx>{`
        @keyframes pulse {
          0% { opacity: 1; }
          50% { opacity: 0.5; }
          100% { opacity: 1; }
        }
      `}</style>
    </Box>
  );
};

export default GaitAnalysisTest;